{"version":3,"file":"static/js/112.12e26188.chunk.js","mappings":"+WAIA,SAAeA,EAAAA,EAAAA,IAA2BC,EAAAA,EAAAA,KAAK,OAAQ,CACrDC,EAAG,sCACD,O,4CC0BJ,MAAMC,EAAoB,CACxBC,GAAI,GACJC,OAAQ,GACRC,GAAI,GACJC,IAAK,GACLC,KAAM,GACNC,SAAU,GACVC,eAAgB,GAChBC,WAAY,GACZC,wBAAyB,GACzBC,QAAS,GACTC,WAAY,CAAC,CAAEV,GAAI,GAAIC,OAAQ,GAAIC,GAAI,GAAIS,OAAQ,KACnDC,UAAW,GACXC,cAAe,IAIXC,EAAgB,WAAe,IAAdC,EAAGC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC5B,MAAMG,GAACC,EAAAA,EAAAA,GAAA,GAAQL,GAmBf,OAhBKI,EAAEnB,KAAOmB,EAAEE,QAASF,EAAEG,KAAKH,EAAEnB,GAAKmB,EAAEE,OAASF,EAAEG,IAGnB,MAA7BH,EAAEX,yBAAqD,MAAlBW,EAAEI,eACzCJ,EAAEX,wBAA0BW,EAAEI,cAI5BC,MAAMC,QAAQN,EAAET,cAClBS,EAAET,WAAaS,EAAET,WAAWgB,IAAKC,IAC/B,MAAMC,GAAER,EAAAA,EAAAA,GAAA,GAASO,GAAK,CAAC,GAEvB,OADiB,MAAbC,EAAGjB,QAA6B,MAAXiB,EAAGC,OAAcD,EAAGjB,OAASiB,EAAGC,MAClDD,KAIJT,CACT,EAGMW,EAAQ,eAAAC,EAAAC,EAAAC,EAAA,IAACC,EAAClB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,OAAKmB,OAA8B,QAAxBJ,EAAa,QAAbC,EAAK,QAALC,EAACC,EAAEZ,UAAE,IAAAW,EAAAA,EAAIC,EAAElC,UAAE,IAAAgC,EAAAA,EAAIE,EAAEb,aAAK,IAAAU,EAAAA,EAAI,IAAIK,MAAO,EAGjEC,EAAa,WAA2B,IAA1BC,EAAGtB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACxB,MAAMU,EAAM,IAAIa,KADiBvB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IACVU,IAAIP,GAAK,CAACW,EAAMX,GAAIA,KACxCqB,EAAM,GACNC,EAAO,IAAIC,IACjB,IAAK,MAAMpB,KAAMgB,EAAIZ,IAAIS,QAAS,CAChC,GAAIM,EAAKE,IAAIrB,GAAK,SAClB,MAAMH,EAAIO,EAAIkB,IAAItB,GACdH,IAAKqB,EAAIK,KAAK1B,GAAIsB,EAAKK,IAAIxB,GACjC,CACA,OAAOkB,CACT,EAGAO,eAAeC,EAAYC,EAAQC,GACjC,MAAMC,GAAMC,EAAAA,EAAAA,KAAIC,EAAAA,GAAI,QAASlB,OAAOc,IAC9BK,QAAaC,EAAAA,EAAAA,QAAOJ,GACpBK,EAAOF,EAAKG,SAAWH,EAAKE,OAAS,CAAC,EAE5C,MAAO,CAAEL,MAAKK,OAAME,IADRlC,MAAMC,QAAY,OAAJ+B,QAAI,IAAJA,OAAI,EAAJA,EAAON,IAAaM,EAAKN,GAAY,GAEjE,CA2Ce,SAASS,EAAeC,GAAqB,IAApB,KAAEC,EAAI,QAAEC,GAASF,EAEvD,MACEX,OAAQc,EAAU,KAClBC,EAAI,WACJC,IACEC,EAAAA,EAAAA,KAGEC,GAAWC,EAAAA,EAAAA,SAAQ,IACnB5C,MAAMC,QAAY,OAAJuC,QAAI,IAAJA,OAAI,EAAJA,EAAMK,UAAkB,WACtC7C,MAAMC,QAAY,OAAJuC,QAAI,IAAJA,OAAI,EAAJA,EAAMM,SAAiB,UAElC,WACN,CAACN,IAEEO,GAAUH,EAAAA,EAAAA,SAAQ,KACV5C,MAAMC,QAAY,OAAJuC,QAAI,IAAJA,OAAI,EAAJA,EAAOG,IAAaH,EAAKG,GAAY,IACpDzC,IAAIS,QACd,CAAC6B,EAAMG,KAGHK,EAASC,IAAcC,EAAAA,EAAAA,UAAS,OAChCC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,KAC5BG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,KAG5BK,EAAUC,IAAeN,EAAAA,EAAAA,WAAS,IAClCO,EAAUC,IAAeR,EAAAA,EAAAA,UAAS,KAClCS,EAAUC,IAAeV,EAAAA,EAAAA,UAAS,CAAEW,OAAQ,EAAGC,WAAY,KAG5DC,GAAYC,EAAAA,EAAAA,aAAYzC,UAC5B,IACE,MAAM0C,EAAUlB,EAAQtD,aAAeyE,EAAAA,EAAAA,IAAgBnB,GAAW,GAElEO,EAASzC,EAAWkC,EAASkB,GAC/B,CAAE,MAAO9D,GACPgE,QAAQC,MAAMjE,GACdmD,EAAS,GACX,GACC,CAACP,KAEJsB,EAAAA,EAAAA,WAAU,KACHhC,IACLY,EAAW,MACXG,EAAS,IACTI,GAAY,GACZO,MACC,CAAC1B,EAAM0B,IAGV,MAAMO,GAAW1B,EAAAA,EAAAA,SAAQ,KACvB,MAAM2B,GAAKpB,GAAS,IAAIvC,OAAO4D,cAC/B,IAAKD,EAAG,OAAOlB,EAEf,OAAOA,EAAMoB,OAAQ/D,IAAO,IAADgE,EAAAC,EAAAC,EAAAC,EACzB,MAAMrG,EAA4B,QAA1BkG,EAAkB,QAAlBC,EAAO,QAAPC,EAAGlE,EAAElC,UAAE,IAAAoG,EAAAA,EAAIlE,EAAEb,aAAK,IAAA8E,EAAAA,EAAIjE,EAAEZ,UAAE,IAAA4E,EAAAA,EAAIhE,EAAEoE,GAClClG,EAAOoB,MAAMC,QAAQS,EAAE9B,MAAQ8B,EAAE9B,KAAKmG,KAAK,KAAO,GACxD,IAAIC,EAAU,GACd,GAA+B,kBAApBtE,EAAErB,cAA4B2F,EAAUtE,EAAErB,mBAChD,GAAIW,MAAMC,QAAQS,EAAErB,gBAAkBqB,EAAErB,cAAcI,OAAQ,CAAC,IAADwF,EAAAC,EACjEF,GAA4B,QAAlBC,EAAAvE,EAAErB,cAAc,UAAE,IAAA4F,OAAA,EAAlBA,EAAoBvG,MAAwB,QAAtBwG,EAAIxE,EAAErB,cAAc,UAAE,IAAA6F,OAAA,EAAlBA,EAAoBzG,SAAU,EACpE,CACA,MAAO,CACLD,EAAIkC,EAAEjC,OAAY,QAANoG,EAAEnE,EAAEhC,UAAE,IAAAmG,EAAAA,EAAInE,EAAEyE,QAASzE,EAAE/B,IAAKC,EACxC8B,EAAE7B,SAAU6B,EAAE5B,eAAgB4B,EAAE3B,WAAYiG,GAC5CP,OAAOW,SAASC,KAAMC,GAZfA,KAAOA,GAAK,IAAIC,WAAWf,cAYNgB,CAAEF,GAAGG,SAASlB,OAE7C,CAAClB,EAAOF,IAGLuC,EAAiBA,CAACC,EAAKjF,KAC3B,MAAMkF,EAAStF,EAAMI,GACrBkD,EAAY,CAAEC,MAAO8B,EAAK7B,WAAY8B,IACtClC,EAAYmC,KAAKC,UAAUpF,EAAG,KAAM,IACpC8C,GAAY,IA8CRuC,GAAWxE,UACf,MAAMqE,EAAStF,EAAMI,GACrB,GAAKkF,GACAI,OAAOC,QAAQ,GAADC,OAAIN,EAAM,mJAC7B,UA5JJrE,eAAgCE,EAAQC,EAAUyE,GAChD,MAAM,IAAExE,EAAG,IAAEO,SAAcV,EAAYC,EAAQC,GACzC0E,EAAOlE,EAAIhC,IAAIS,QAAQ8D,OAAO3E,GAAMA,IAAOa,OAAOwF,IAIxD,OAHIC,EAAK3G,SAAWyC,EAAIzC,cAChB4G,EAAAA,EAAAA,WAAU1E,EAAK,CAAE,CAACD,GAAW0E,EAAME,UAAWC,KAAKC,QAEpDJ,CACT,CAsJYK,CAAiBlE,EAAYI,EAAUiD,GAC7C3C,EAAW,CAAEyD,KAAM,UAAWC,KAAM,6DAC9B5C,IACoB,oBAAftB,SAAiCA,GAC9C,CAAE,MAAOtC,GACP8C,EAAW,CAAEyD,KAAM,QAASC,MAAO,OAADxG,QAAC,IAADA,OAAC,EAADA,EAAG6C,UAAW,6BAClD,GAaF,OACE4D,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAACxE,KAAMA,EAAMC,QAASA,EAASwE,SAAS,KAAKC,WAAS,EAAAC,SAAA,EAC3DJ,EAAAA,EAAAA,MAACK,EAAAA,EAAW,CAAAD,SAAA,CAAC,8EAA+BrE,EAAS,oBAErDtE,EAAAA,EAAAA,KAAC6I,EAAAA,EAAa,CAACC,UAAQ,EAACC,GAAI,CAAEC,EAAG,GAAIL,UACnCJ,EAAAA,EAAAA,MAACU,EAAAA,EAAS,CAACR,SAAS,KAAKM,GAAI,CAAEG,GAAI,GAAIP,SAAA,EAErCJ,EAAAA,EAAAA,MAACY,EAAAA,EAAK,CAACC,UAAU,MAAMC,WAAW,SAASC,eAAe,gBAAgBP,GAAI,CAAEQ,GAAI,GAAIZ,SAAA,EACtFJ,EAAAA,EAAAA,MAACY,EAAAA,EAAK,CAACC,UAAU,MAAMI,QAAS,EAAGH,WAAW,SAAQV,SAAA,EACpD3I,EAAAA,EAAAA,KAACyJ,EAAAA,EAAO,CAACC,MAAM,gFAAmBf,UAChC3I,EAAAA,EAAAA,KAAA,QAAA2I,UACE3I,EAAAA,EAAAA,KAAC2J,EAAAA,EAAM,CAACC,QAAQ,YAAYC,WAAW7J,EAAAA,EAAAA,KAAC8J,EAAO,IAAKC,QA7E1CC,KACxBzE,EAAY,CAAEC,OAAQ,EAAGC,WAAY,KACrCJ,EAAYmC,KAAKC,UAAUvH,EAAmB,KAAM,IACpDiF,GAAY,IA0EkF4D,GAAI,CAAEkB,cAAe,QAAStB,SAAC,6BAKnH3I,EAAAA,EAAAA,KAACyJ,EAAAA,EAAO,CAACC,MAAM,wCAASf,UACtB3I,EAAAA,EAAAA,KAAA,QAAA2I,UACE3I,EAAAA,EAAAA,KAACkK,EAAAA,EAAU,CAACH,QAASrE,EAAUiD,UAAC3I,EAAAA,EAAAA,KAACmK,EAAAA,EAAW,cAIlDnK,EAAAA,EAAAA,KAACoK,EAAAA,EAAS,CACRC,YAAY,wFACZC,KAAK,QACLC,MAAOzF,EACP0F,SAAW1I,GAAMiD,EAASjD,EAAE2I,OAAOF,YAItC5F,IACC3E,EAAAA,EAAAA,KAAC0K,EAAAA,EAAK,CAACC,SAAUhG,EAAQ0D,KAAMU,GAAI,CAAEQ,GAAI,GAAIZ,SAC1ChE,EAAQ2D,QAKbtI,EAAAA,EAAAA,KAAC4K,EAAAA,EAAI,CAACC,WAAS,EAACrB,QAAS,EAAEb,UACzB3I,EAAAA,EAAAA,KAAC4K,EAAAA,EAAI,CAACE,MAAI,EAACC,GAAI,GAAGpC,UAChBJ,EAAAA,EAAAA,MAACyC,EAAAA,EAAK,CAACpB,QAAQ,WAAWb,GAAI,CAAEC,EAAG,GAAIL,SAAA,EACrCJ,EAAAA,EAAAA,MAAC0C,EAAAA,EAAU,CAACrB,QAAQ,YAAYb,GAAI,CAAEmC,WAAY,IAAK3B,GAAI,GAAIZ,SAAA,CAAC,8BACtD1C,EAAS7E,OAAO,MAAI4D,EAAM5D,OAAO,2BAAQpB,EAAAA,EAAAA,KAAA,KAAA2I,SAAIrE,QAGvDiE,EAAAA,EAAAA,MAACY,EAAAA,EAAK,CAACK,QAAS,EAAEb,SAAA,CACf1C,EAASpE,IAAKQ,IAAO,IAAD8I,EAAAC,EAAAC,EAAAC,EACnB,MAAMC,EAAOtJ,EAAMI,IAAM,OACzB,OACEkG,EAAAA,EAAAA,MAACY,EAAAA,EAAK,CAEJC,UAAU,MACVC,WAAW,SACXC,eAAe,gBACfP,GAAI,CACFC,EAAG,IACHwC,aAAc,EACd,UAAW,CAAEC,WAAY,UAAWC,OAAQ,YAE9C3B,QAASA,IAAM1C,EAAerC,EAAM2G,QAAQtJ,GAAIA,GAAGsG,SAAA,EAEnDJ,EAAAA,EAAAA,MAACY,EAAAA,EAAK,CAACC,UAAU,MAAMI,QAAS,EAAGH,WAAW,SAAQV,SAAA,EACpD3I,EAAAA,EAAAA,KAACiL,EAAAA,EAAU,CAAClC,GAAI,CAAEmC,WAAY,IAAKU,SAAU,IAAKjD,SAChC,QADgCwC,EAC3C,QAD2CC,EAC/C/I,EAAElC,UAAE,IAAAiL,EAAAA,EAAI/I,EAAEb,aAAK,IAAA2J,EAAAA,EAAI9I,EAAEZ,MAExB8G,EAAAA,EAAAA,MAAC0C,EAAAA,EAAU,CAACrB,QAAQ,QAAQiC,MAAM,iBAAgBlD,SAAA,EAC9CtG,EAAEjC,QAAU,IAAImC,OAAO,YAAsB,QAAlB8I,EAAK,QAALC,EAACjJ,EAAEhC,UAAE,IAAAiL,EAAAA,EAAIjJ,EAAEyE,eAAO,IAAAuE,EAAAA,EAAI,IAAI9I,UAExDF,EAAE/B,MAAON,EAAAA,EAAAA,KAAC8L,EAAAA,EAAI,CAACxB,KAAK,QAAQyB,MAAO1J,EAAE/B,IAAKyI,GAAI,CAAEiD,GAAI,MACnD3J,EAAE9B,MAAQ,IAAIsB,IAAKoK,IACnBjM,EAAAA,EAAAA,KAAC8L,EAAAA,EAAI,CAASxB,KAAK,QAAQV,QAAQ,WAAWmC,MAAOE,EAAGlD,GAAI,CAAEiD,GAAI,KAAvDC,QAIf1D,EAAAA,EAAAA,MAACY,EAAAA,EAAK,CAACC,UAAU,MAAMI,QAAS,GAAKH,WAAW,SAASU,QAAUjI,GAAMA,EAAEoK,kBAAkBvD,SAAA,EAC3F3I,EAAAA,EAAAA,KAACyJ,EAAAA,EAAO,CAACC,MAAM,oBAASf,UACtB3I,EAAAA,EAAAA,KAACkK,EAAAA,EAAU,CAACI,KAAK,QAAQP,QAASA,IApFzC7G,WACjB,UACQiJ,UAAUC,UAAUC,UAAU7E,KAAKC,UAAUpF,EAAG,KAAM,IAC5DuC,EAAW,CAAEyD,KAAM,UAAWC,KAAM,yFACtC,CAAE,MAAAgE,GACA1H,EAAW,CAAEyD,KAAM,QAASC,KAAM,0GACpC,GA8EgEiE,CAAWlK,GAAGsG,UACpD3I,EAAAA,EAAAA,KAACwM,EAAAA,EAAe,CAACC,SAAS,eAG9BzM,EAAAA,EAAAA,KAACyJ,EAAAA,EAAO,CAACC,MAAM,oBAASf,UACtB3I,EAAAA,EAAAA,KAACkK,EAAAA,EAAU,CAACI,KAAK,QAAQP,QAASA,IAAM1C,EAAerC,EAAM2G,QAAQtJ,GAAIA,GAAGsG,UAC1E3I,EAAAA,EAAAA,KAAC0M,EAAAA,EAAQ,CAACD,SAAS,eAGvBzM,EAAAA,EAAAA,KAACyJ,EAAAA,EAAO,CAACC,MAAM,yEAAiBf,UAC9B3I,EAAAA,EAAAA,KAACkK,EAAAA,EAAU,CAACI,KAAK,QAAQP,QAASA,IAAMrC,GAASrF,GAAGsG,UAClD3I,EAAAA,EAAAA,KAAC2M,EAAAA,EAAU,CAACF,SAAS,mBArCtBlB,KA6CU,IAApBtF,EAAS7E,SACRpB,EAAAA,EAAAA,KAACiL,EAAAA,EAAU,CAACrB,QAAQ,QAAQiC,MAAM,iBAAgBlD,SAAC,iEAWjE3I,EAAAA,EAAAA,KAAC4M,EAAAA,EAAa,CAAAjE,UACZ3I,EAAAA,EAAAA,KAAC2J,EAAAA,EAAM,CAACI,QAAS9F,EAAQ0E,SAAC,oBAI5BJ,EAAAA,EAAAA,MAACC,EAAAA,EAAM,CAACxE,KAAMkB,EAAUjB,QAASA,IAAMkB,GAAY,GAAQsD,SAAS,KAAKC,WAAS,EAAAC,SAAA,EAChF3I,EAAAA,EAAAA,KAAC4I,EAAAA,EAAW,CAAAD,UACV3I,EAAAA,EAAAA,KAACmJ,EAAAA,EAAK,CAACC,UAAU,MAAME,eAAe,gBAAgBD,WAAW,SAAQV,UACvEJ,EAAAA,EAAAA,MAAC0C,EAAAA,EAAU,CAACrB,QAAQ,KAAKb,GAAI,CAAEmC,WAAY,KAAMvC,SAAA,CAAC,4BACrCrD,EAASE,OAAS,EAAIF,EAASG,WAAa,8BAI7D8C,EAAAA,EAAAA,MAACM,EAAAA,EAAa,CAACC,UAAQ,EAAAH,SAAA,EACrB3I,EAAAA,EAAAA,KAACoK,EAAAA,EAAS,CACRG,MAAOnF,EACPoF,SAAW1I,GAAMuD,EAAYvD,EAAE2I,OAAOF,OACtCsC,WAAS,EACTC,QAAS,GACTpE,WAAS,EACTqE,WAAY,CACVhE,GAAI,CACFiE,WAAY,mEACZP,SAAU,QAIhBlE,EAAAA,EAAAA,MAAC0C,EAAAA,EAAU,CAACrB,QAAQ,QAAQiC,MAAM,iBAAiB9C,GAAI,CAAEkE,GAAI,GAAItE,SAAA,CAAC,MAC9D3I,EAAAA,EAAAA,KAAA,KAAA2I,SAAG,gBAAe,6KAA4C3I,EAAAA,EAAAA,KAAA,KAAA2I,SAAIrE,IAAa,iDAGrFiE,EAAAA,EAAAA,MAACqE,EAAAA,EAAa,CAAAjE,SAAA,EACZ3I,EAAAA,EAAAA,KAAC2J,EAAAA,EAAM,CAACI,QAASA,IAAM5E,GAAY,GAAQ4D,GAAI,CAAEkB,cAAe,QAAStB,SAAC,kBAG1E3I,EAAAA,EAAAA,KAAC2J,EAAAA,EAAM,CAACC,QAAQ,YAAYG,QAxMjB7G,UACjB,IACE,MAAMgK,EAAY1F,KAAK2F,MAAM/H,GAC7B,IAAK8H,GAAkC,kBAAdA,EACvB,MAAM,IAAIE,MAAM,wEAElB,MAAMC,EAASpM,EAAciM,GACvBI,EAAQrL,EAAMoL,GACpB,IAAKC,EAAO,MAAM,IAAIF,MAAM,uFAGtBG,EAAAA,EAAAA,IAAWD,EAAOD,GAGxB,MAAMG,EAAQlI,EAASG,WAClB+H,EAEMA,IAAUF,SA5H3BpK,eAA+BE,EAAQC,EAAUmK,EAAOF,GACtD,MAAM,IAAEhK,EAAG,IAAEO,SAAcV,EAAYC,EAAQC,GACzCZ,EAAMoB,EAAIhC,IAAIS,QACdmL,EAAIhL,EAAIkJ,QAAQrJ,OAAOkL,IAC7B,IAAW,IAAPC,EAAU,CAEZ,MAAMC,EAAW,IAAIjL,EAAKH,OAAOgL,IAEjC,aADMtF,EAAAA,EAAAA,WAAU1E,EAAK,CAAE,CAACD,GAAWqK,EAAUzF,UAAWC,KAAKC,QACtDuF,CACT,CAEA,MAAM3F,EAAOtF,EAAIkL,QACjB5F,EAAK0F,GAAKnL,OAAOgL,GACjB,IAAK,IAAIM,EAAI7F,EAAK3G,OAAS,EAAGwM,GAAK,EAAGA,IAChCA,IAAMH,GAAK1F,EAAK6F,KAAOtL,OAAOgL,IAAQvF,EAAK8F,OAAOD,EAAG,GAG3D,aADM5F,EAAAA,EAAAA,WAAU1E,EAAK,CAAE,CAACD,GAAW0E,EAAME,UAAWC,KAAKC,QAClDJ,CACT,CA2Gc+F,CAAgB5J,EAAYI,EAAUkJ,EAAOF,SAlJ3DpK,eAA4BE,EAAQC,GAAwB,IAAd0K,EAAM5M,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACrD,MAAM,IAAEmC,EAAG,IAAEO,SAAcV,EAAYC,EAAQC,GACzC2K,EAAOnK,EAAIhC,IAAIS,QACf2L,EAAQF,EAAOlM,IAAIS,QAAQ8D,OAAO3E,IAAOuM,EAAK5G,SAAS3F,IACvDsG,EAAO,IAAIiG,KAASC,GAI1B,OAHIA,EAAM7M,OAAS,SACX4G,EAAAA,EAAAA,WAAU1E,EAAK,CAAE,CAACD,GAAW0E,EAAME,UAAWC,KAAKC,QAEpDJ,CACT,CAuIcmG,CAAahK,EAAYI,EAAU,CAACgJ,IAO5C1I,EAAW,CAAEyD,KAAM,UAAWC,KAAM,8BACpCnD,GAAY,SAGNO,IACoB,oBAAftB,SAAiCA,GAC9C,CAAE,MAAOtC,GACP8C,EAAW,CAAEyD,KAAM,QAASC,KAAK,mCAADT,OAAiB/F,EAAE6C,UACrD,GAyKuDoE,GAAI,CAAEkB,cAAe,QAAStB,SAAC,uBAOnFhE,IACC3E,EAAAA,EAAAA,KAACmO,EAAAA,EAAG,CAACpF,GAAI,CAAEqF,SAAU,QAASC,MAAO,sBAAuBC,OAAQ,MAAO3F,UACzE3I,EAAAA,EAAAA,KAAC0K,EAAAA,EAAK,CAACC,SAAUhG,EAAQ0D,KAAMpE,QAASA,IAAMW,EAAW,MAAOgF,QAAQ,SAASb,GAAI,CAAEwF,UAAW,GAAI5F,SACnGhE,EAAQ2D,WAMrB,C","sources":["../node_modules/@mui/icons-material/esm/Add.js","components/admin/VocabularyModal.jsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z\"\n}), 'Add');","// src/components/admin/VocabularyModal.jsx — v4.1-fix\n// Fix: unit의 ID 배열 필드 자동 감지(vocabIds 우선, 없으면 wordIds)\n//      추가/삭제/리네임 시 해당 필드 정확히 갱신(순서 유지)\n//      화면 로드·표시도 유닛 배열 순서 보장\n\nimport React, { useEffect, useMemo, useState, useCallback } from \"react\";\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Container, Grid, Paper, Stack, TextField, Typography, Button,\n  Chip, IconButton, Tooltip, Alert, Box,\n} from \"@mui/material\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport RefreshIcon from \"@mui/icons-material/Refresh\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\nimport AddIcon from \"@mui/icons-material/Add\";\n\nimport { useUnitEdit } from \"../../pages/admin/UnitEditProvider\";\n\n// 기존 헬퍼: /words upsert, words 조회\nimport {\n  fetchWordsByIds,\n  upsertWord,\n} from \"../../firebase/firebaseFirestore\";\n\n// 👉 유닛 필드 직접 업데이트용(Firestore v9)\nimport { db } from \"../../firebase/firebaseConfig\";\nimport {\n  doc, getDoc, updateDoc,\n} from \"firebase/firestore\";\n\n// ===== 유틸 =====\nconst NEW_ITEM_TEMPLATE = {\n  zh: \"\",\n  pinyin: \"\",\n  ko: \"\",\n  pos: \"\",\n  tags: [],\n  sentence: \"\",\n  sentencePinyin: \"\",\n  sentenceKo: \"\",\n  sentenceKoPronunciation: \"\", // 신키\n  grammar: [],\n  extensions: [{ zh: \"\", pinyin: \"\", ko: \"\", koPron: \"\" }],\n  keyPoints: [],\n  pronunciation: [], // [{label,pinyin,ko,tone}]\n};\n\n/** 스키마 보정: 구키→신키 치환 */\nconst fixWordSchema = (raw = {}) => {\n  const w = { ...raw };\n\n  // id/zh 보완\n  if (!w.zh && (w.hanzi || w.id)) w.zh = w.hanzi || w.id;\n\n  // 문장 한국어 발음\n  if (w.sentenceKoPronunciation == null && w.sentencePron != null) {\n    w.sentenceKoPronunciation = w.sentencePron;\n  }\n\n  // 확장 예문 키 보정\n  if (Array.isArray(w.extensions)) {\n    w.extensions = w.extensions.map((e) => {\n      const ex = { ...(e || {}) };\n      if (ex.koPron == null && ex.pron != null) ex.koPron = ex.pron;\n      return ex;\n    });\n  }\n\n  return w;\n};\n\n// ID 추출(여러 스키마 대응)\nconst getId = (v = {}) => String(v.id ?? v.zh ?? v.hanzi ?? \"\").trim();\n\n// 배열을 유닛의 id 순서대로 정렬\nconst orderByIds = (ids = [], words = []) => {\n  const map = new Map(words.map(w => [getId(w), w]));\n  const out = [];\n  const seen = new Set();\n  for (const id of ids.map(String)) {\n    if (seen.has(id)) continue;\n    const w = map.get(id);\n    if (w) { out.push(w); seen.add(id); }\n  }\n  return out;\n};\n\n// ===== 유닛 배열 필드 조작(직접 Firestore 업데이트) =====\nasync function readUnitIds(unitId, fieldKey) {\n  const ref = doc(db, \"units\", String(unitId));\n  const snap = await getDoc(ref);\n  const data = snap.exists() ? snap.data() : {};\n  const arr = Array.isArray(data?.[fieldKey]) ? data[fieldKey] : [];\n  return { ref, data, arr };\n}\n\nasync function addIdsToUnit(unitId, fieldKey, newIds = []) {\n  const { ref, arr } = await readUnitIds(unitId, fieldKey);\n  const base = arr.map(String);\n  const extra = newIds.map(String).filter(id => !base.includes(id));\n  const next = [...base, ...extra];\n  if (extra.length > 0) {\n    await updateDoc(ref, { [fieldKey]: next, updatedAt: Date.now() });\n  }\n  return next;\n}\n\nasync function removeIdFromUnit(unitId, fieldKey, targetId) {\n  const { ref, arr } = await readUnitIds(unitId, fieldKey);\n  const next = arr.map(String).filter(id => id !== String(targetId));\n  if (next.length !== arr.length) {\n    await updateDoc(ref, { [fieldKey]: next, updatedAt: Date.now() });\n  }\n  return next;\n}\n\n// 리네임(교체): 기존 위치를 유지하면서 wasId → newId로 교체\nasync function replaceIdInUnit(unitId, fieldKey, wasId, newId) {\n  const { ref, arr } = await readUnitIds(unitId, fieldKey);\n  const ids = arr.map(String);\n  const i = ids.indexOf(String(wasId));\n  if (i === -1) {\n    // 기존에 없으면 append\n    const appended = [...ids, String(newId)];\n    await updateDoc(ref, { [fieldKey]: appended, updatedAt: Date.now() });\n    return appended;\n  }\n  // 자리 유지 교체, 중복 방지\n  const next = ids.slice();\n  next[i] = String(newId);\n  for (let k = next.length - 1; k >= 0; k--) {\n    if (k !== i && next[k] === String(newId)) next.splice(k, 1);\n  }\n  await updateDoc(ref, { [fieldKey]: next, updatedAt: Date.now() });\n  return next;\n}\n\nexport default function VocabularyModal({ open, onClose }) {\n  // UnitEditProvider에서 unitId / unit 제공\n  const {\n    unitId: editUnitId,\n    unit,              // { ..., vocabIds?:[], wordIds?:[] }\n    reloadUnit,        // optional\n  } = useUnitEdit();\n\n  // 🔑 유닛 배열 필드 자동 감지\n  const idsField = useMemo(() => {\n    if (Array.isArray(unit?.vocabIds)) return \"vocabIds\";\n    if (Array.isArray(unit?.wordIds)) return \"wordIds\";\n    // 기본은 vocabIds로 운용\n    return \"vocabIds\";\n  }, [unit]);\n\n  const unitIds = useMemo(() => {\n    const arr = Array.isArray(unit?.[idsField]) ? unit[idsField] : [];\n    return arr.map(String);\n  }, [unit, idsField]);\n\n  // 화면 상태\n  const [message, setMessage] = useState(null);\n  const [query, setQuery] = useState(\"\");\n  const [words, setWords] = useState([]); // /words에서 로드된 단어 목록\n\n  // JSON 인라인 편집\n  const [jsonOpen, setJsonOpen] = useState(false);\n  const [jsonText, setJsonText] = useState(\"\");\n  const [jsonMeta, setJsonMeta] = useState({ index: -1, originalId: \"\" });\n\n  // ===== 로딩 =====\n  const loadWords = useCallback(async () => {\n    try {\n      const fetched = unitIds.length ? await fetchWordsByIds(unitIds) : [];\n      // 유닛의 배열 순서대로 재정렬\n      setWords(orderByIds(unitIds, fetched));\n    } catch (e) {\n      console.error(e);\n      setWords([]);\n    }\n  }, [unitIds]);\n\n  useEffect(() => {\n    if (!open) return;\n    setMessage(null);\n    setQuery(\"\");\n    setJsonOpen(false);\n    loadWords();\n  }, [open, loadWords]);\n\n  // 검색 필터\n  const filtered = useMemo(() => {\n    const q = (query || \"\").trim().toLowerCase();\n    if (!q) return words;\n    const h = (x) => (x || \"\").toString().toLowerCase();\n    return words.filter((v) => {\n      const zh = v.zh ?? v.hanzi ?? v.id ?? v.cn;\n      const tags = Array.isArray(v.tags) ? v.tags.join(\" \") : \"\";\n      let pronStr = \"\";\n      if (typeof v.pronunciation === \"string\") pronStr = v.pronunciation;\n      else if (Array.isArray(v.pronunciation) && v.pronunciation.length) {\n        pronStr = v.pronunciation[0]?.ko || v.pronunciation[0]?.pinyin || \"\";\n      }\n      return [\n        zh, v.pinyin, v.ko ?? v.meaning, v.pos, tags,\n        v.sentence, v.sentencePinyin, v.sentenceKo, pronStr,\n      ].filter(Boolean).some((x) => h(x).includes(q));\n    });\n  }, [words, query]);\n\n  // 항목 클릭 → JSON 모달\n  const openJsonEditor = (idx, v) => {\n    const wordId = getId(v);\n    setJsonMeta({ index: idx, originalId: wordId });\n    setJsonText(JSON.stringify(v, null, 2));\n    setJsonOpen(true);\n  };\n\n  // 새 단어 추가\n  const openNewItemEditor = () => {\n    setJsonMeta({ index: -1, originalId: \"\" });\n    setJsonText(JSON.stringify(NEW_ITEM_TEMPLATE, null, 2));\n    setJsonOpen(true);\n  };\n\n  // JSON 저장(신규/수정 → /words upsert + unit.<idsField> 연결)\n  const onSaveJson = async () => {\n    try {\n      const parsedRaw = JSON.parse(jsonText);\n      if (!parsedRaw || typeof parsedRaw !== \"object\") {\n        throw new Error(\"올바른 JSON 객체가 아닙니다.\");\n      }\n      const parsed = fixWordSchema(parsedRaw);\n      const newId = getId(parsed);\n      if (!newId) throw new Error(\"wordId(zh/hanzi/id) 중 하나는 필수입니다.\");\n\n      // 1) /words upsert\n      await upsertWord(newId, parsed);\n\n      // 2) unit 연결/교체 (정확한 필드에 반영)\n      const wasId = jsonMeta.originalId;\n      if (!wasId) {\n        await addIdsToUnit(editUnitId, idsField, [newId]); // 신규\n      } else if (wasId !== newId) {\n        await replaceIdInUnit(editUnitId, idsField, wasId, newId); // 리네임\n      } else {\n        // 동일 ID면 연결 변경 없음\n      }\n\n      setMessage({ type: \"success\", text: \"저장 완료\" });\n      setJsonOpen(false);\n\n      // 화면 갱신\n      await loadWords();\n      if (typeof reloadUnit === \"function\") await reloadUnit();\n    } catch (e) {\n      setMessage({ type: \"error\", text: `JSON 저장 실패: ${e.message}` });\n    }\n  };\n\n  // 삭제: unit 연결만 제거(문서 보존)\n  const onDelete = async (v) => {\n    const wordId = getId(v);\n    if (!wordId) return;\n    if (!window.confirm(`${wordId} 단어를 이 유닛에서 제거할까요? (/words 문서는 보존됩니다)`)) return;\n    try {\n      await removeIdFromUnit(editUnitId, idsField, wordId);\n      setMessage({ type: \"success\", text: \"유닛에서 제거 완료\" });\n      await loadWords();\n      if (typeof reloadUnit === \"function\") await reloadUnit();\n    } catch (e) {\n      setMessage({ type: \"error\", text: e?.message || \"제거 실패\" });\n    }\n  };\n\n  // JSON 복사\n  const onCopyJson = async (v) => {\n    try {\n      await navigator.clipboard.writeText(JSON.stringify(v, null, 2));\n      setMessage({ type: \"success\", text: \"JSON이 클립보드에 복사되었습니다.\" });\n    } catch {\n      setMessage({ type: \"error\", text: \"복사 실패: 브라우저 권한을 확인하세요.\" });\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"xl\" fullWidth>\n      <DialogTitle>단어 관리 (유닛) — /words 저장 + unit.{idsField} 연결</DialogTitle>\n\n      <DialogContent dividers sx={{ p: 0 }}>\n        <Container maxWidth=\"lg\" sx={{ py: 2 }}>\n          {/* 상단 바 */}\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ mb: 2 }}>\n            <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n              <Tooltip title=\"새 단어 추가(템플릿으로 시작)\">\n                <span>\n                  <Button variant=\"contained\" startIcon={<AddIcon />} onClick={openNewItemEditor} sx={{ textTransform: \"none\" }}>\n                    새 단어\n                  </Button>\n                </span>\n              </Tooltip>\n              <Tooltip title=\"목록 새로고침\">\n                <span>\n                  <IconButton onClick={loadWords}><RefreshIcon /></IconButton>\n                </span>\n              </Tooltip>\n            </Stack>\n            <TextField\n              placeholder=\"검색: 한자/병음/뜻/예문/품사/태그\"\n              size=\"small\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n            />\n          </Stack>\n\n          {message && (\n            <Alert severity={message.type} sx={{ mb: 2 }}>\n              {message.text}\n            </Alert>\n          )}\n\n          {/* 단어 목록 */}\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <Paper variant=\"outlined\" sx={{ p: 2 }}>\n                <Typography variant=\"subtitle1\" sx={{ fontWeight: 700, mb: 1 }}>\n                  단어 목록 ({filtered.length} / {words.length}) — 필드: <b>{idsField}</b>\n                </Typography>\n\n                <Stack spacing={1}>\n                  {filtered.map((v) => {\n                    const name = getId(v) || \"item\";\n                    return (\n                      <Stack\n                        key={name}\n                        direction=\"row\"\n                        alignItems=\"center\"\n                        justifyContent=\"space-between\"\n                        sx={{\n                          p: 0.75,\n                          borderRadius: 1,\n                          \"&:hover\": { background: \"#fafafa\", cursor: \"pointer\" },\n                        }}\n                        onClick={() => openJsonEditor(words.indexOf(v), v)}\n                      >\n                        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                          <Typography sx={{ fontWeight: 700, minWidth: 80 }}>\n                            {v.zh ?? v.hanzi ?? v.id}\n                          </Typography>\n                          <Typography variant=\"body2\" color=\"text.secondary\">\n                            {(v.pinyin || \"\").trim()} — {(v.ko ?? v.meaning ?? \"\").trim()}\n                          </Typography>\n                          {v.pos && <Chip size=\"small\" label={v.pos} sx={{ ml: 1 }} />}\n                          {(v.tags || []).map((t) => (\n                            <Chip key={t} size=\"small\" variant=\"outlined\" label={t} sx={{ ml: 0.5 }} />\n                          ))}\n                        </Stack>\n\n                        <Stack direction=\"row\" spacing={0.5} alignItems=\"center\" onClick={(e) => e.stopPropagation()}>\n                          <Tooltip title=\"JSON 복사\">\n                            <IconButton size=\"small\" onClick={() => onCopyJson(v)}>\n                              <ContentCopyIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Tooltip>\n                          <Tooltip title=\"JSON 편집\">\n                            <IconButton size=\"small\" onClick={() => openJsonEditor(words.indexOf(v), v)}>\n                              <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Tooltip>\n                          <Tooltip title=\"유닛에서 제거(연결만 삭제)\">\n                            <IconButton size=\"small\" onClick={() => onDelete(v)}>\n                              <DeleteIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Tooltip>\n                        </Stack>\n                      </Stack>\n                    );\n                  })}\n\n                  {filtered.length === 0 && (\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      결과가 없습니다.\n                    </Typography>\n                  )}\n                </Stack>\n              </Paper>\n            </Grid>\n          </Grid>\n        </Container>\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={onClose}>닫기</Button>\n      </DialogActions>\n\n      {/* JSON 편집 모달(단일 항목) */}\n      <Dialog open={jsonOpen} onClose={() => setJsonOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n            <Typography variant=\"h6\" sx={{ fontWeight: 700 }}>\n              JSON 편집 — {jsonMeta.index >= 0 ? jsonMeta.originalId : \"새 단어\"}\n            </Typography>\n          </Stack>\n        </DialogTitle>\n        <DialogContent dividers>\n          <TextField\n            value={jsonText}\n            onChange={(e) => setJsonText(e.target.value)}\n            multiline\n            minRows={18}\n            fullWidth\n            InputProps={{\n              sx: {\n                fontFamily: \"ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace\",\n                fontSize: 13,\n              },\n            }}\n          />\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n            * <b>zh/hanzi/id</b> 중 하나는 반드시 있어야 합니다. 저장 시 /words에 반영되고 현재 유닛(<b>{idsField}</b>)에 연결됩니다.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setJsonOpen(false)} sx={{ textTransform: \"none\" }}>\n            닫기\n          </Button>\n          <Button variant=\"contained\" onClick={onSaveJson} sx={{ textTransform: \"none\" }}>\n            저장\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* 우측 하단 알림 */}\n      {message && (\n        <Box sx={{ position: \"fixed\", inset: \"auto 24px 24px auto\", zIndex: 1300 }}>\n          <Alert severity={message.type} onClose={() => setMessage(null)} variant=\"filled\" sx={{ boxShadow: 2 }}>\n            {message.text}\n          </Alert>\n        </Box>\n      )}\n    </Dialog>\n  );\n}\n"],"names":["createSvgIcon","_jsx","d","NEW_ITEM_TEMPLATE","zh","pinyin","ko","pos","tags","sentence","sentencePinyin","sentenceKo","sentenceKoPronunciation","grammar","extensions","koPron","keyPoints","pronunciation","fixWordSchema","raw","arguments","length","undefined","w","_objectSpread","hanzi","id","sentencePron","Array","isArray","map","e","ex","pron","getId","_ref","_ref2","_v$id","v","String","trim","orderByIds","ids","Map","out","seen","Set","has","get","push","add","async","readUnitIds","unitId","fieldKey","ref","doc","db","snap","getDoc","data","exists","arr","VocabularyModal","_ref3","open","onClose","editUnitId","unit","reloadUnit","useUnitEdit","idsField","useMemo","vocabIds","wordIds","unitIds","message","setMessage","useState","query","setQuery","words","setWords","jsonOpen","setJsonOpen","jsonText","setJsonText","jsonMeta","setJsonMeta","index","originalId","loadWords","useCallback","fetched","fetchWordsByIds","console","error","useEffect","filtered","q","toLowerCase","filter","_ref4","_ref5","_v$zh","_v$ko","cn","join","pronStr","_v$pronunciation$","_v$pronunciation$2","meaning","Boolean","some","x","toString","h","includes","openJsonEditor","idx","wordId","JSON","stringify","onDelete","window","confirm","concat","targetId","next","updateDoc","updatedAt","Date","now","removeIdFromUnit","type","text","_jsxs","Dialog","maxWidth","fullWidth","children","DialogTitle","DialogContent","dividers","sx","p","Container","py","Stack","direction","alignItems","justifyContent","mb","spacing","Tooltip","title","Button","variant","startIcon","AddIcon","onClick","openNewItemEditor","textTransform","IconButton","RefreshIcon","TextField","placeholder","size","value","onChange","target","Alert","severity","Grid","container","item","xs","Paper","Typography","fontWeight","_ref6","_v$zh2","_ref7","_v$ko2","name","borderRadius","background","cursor","indexOf","minWidth","color","Chip","label","ml","t","stopPropagation","navigator","clipboard","writeText","_unused","onCopyJson","ContentCopyIcon","fontSize","EditIcon","DeleteIcon","DialogActions","multiline","minRows","InputProps","fontFamily","mt","parsedRaw","parse","Error","parsed","newId","upsertWord","wasId","i","appended","slice","k","splice","replaceIdInUnit","newIds","base","extra","addIdsToUnit","Box","position","inset","zIndex","boxShadow"],"sourceRoot":""}