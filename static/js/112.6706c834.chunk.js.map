{"version":3,"file":"static/js/112.6706c834.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Add.js","components/admin/VocabularyModal.jsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z\"\n}), 'Add');","// src/components/admin/VocabularyModal.jsx — v4.0 (/words 정규화 + unit.vocabIds 연동)\nimport React, { useEffect, useMemo, useState, useCallback } from \"react\";\nimport {\n  Dialog, DialogTitle, DialogContent, DialogActions,\n  Container, Grid, Paper, Stack, TextField, Typography, Button,\n  Chip, IconButton, Tooltip, Alert, Box,\n} from \"@mui/material\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport RefreshIcon from \"@mui/icons-material/Refresh\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport SaveIcon from \"@mui/icons-material/Save\";\nimport { useUnitEdit } from \"../../pages/admin/UnitEditProvider\";\n\nimport {\n  fetchWordsByIds,\n  upsertWord,\n  addWordIdsToUnit,\n  removeWordIdFromUnit,\n} from \"../../firebase/firebaseFirestore\";\n\n// ===== 유틸 =====\nconst stringify = (v, fallback = \"[]\") => {\n  try { return JSON.stringify(v ?? JSON.parse(fallback), null, 2); } catch { return fallback; }\n};\nconst toTagsString = (tags) => Array.isArray(tags) ? tags.join(\", \") : (tags || \"\");\n\nconst NEW_ITEM_TEMPLATE = {\n  hanzi: \"\",\n  pinyin: \"\",\n  ko: \"\",\n  pos: \"\",\n  tags: [],\n\n  // 예문\n  sentence: \"\",\n  sentencePinyin: \"\",\n  sentenceKo: \"\",\n  sentenceKoPronunciation: \"\",   // ✅ 신키 (구키: sentencePron)\n\n  // 확장/문법\n  grammar: [],\n  extensions: [\n    { zh: \"\", pinyin: \"\", ko: \"\", koPron: \"\" } // ✅ koPron 권장 (구키 pron 폴백 처리)\n  ],\n  keyPoints: [],\n  pronunciation: [], // [{label,pinyin,ko,tone}]\n};\n\n/** 스키마 보정: 구키→신키 치환 */\nconst fixWordSchema = (raw = {}) => {\n  const w = { ...raw };\n\n  // id 결정 보조\n  if (!w.zh && (w.hanzi || w.id)) w.zh = w.hanzi || w.id;\n\n  // 문장 한국어 발음\n  if (w.sentenceKoPronunciation == null && w.sentencePron != null) {\n    w.sentenceKoPronunciation = w.sentencePron;\n  }\n\n  // 확장 예문 키 보정\n  if (Array.isArray(w.extensions)) {\n    w.extensions = w.extensions.map((e) => {\n      const ex = { ...(e || {}) };\n      if (ex.koPron == null && ex.pron != null) ex.koPron = ex.pron;\n      return ex;\n    });\n  }\n\n  return w;\n};\n\nexport default function VocabularyModal({ open, onClose }) {\n  // UnitEditProvider에서 unitId / vocabIds 기대\n  const {\n    unitId: editUnitId,      // ← UnitEditProvider에서 노출되도록 되어 있어야 함\n    unit,                    // { ..., vocabIds: [...] }\n    reloadUnit,              // (선택) 유닛 다시 로드하는 헬퍼가 있으면 사용\n  } = useUnitEdit();\n\n  const vocabIds = Array.isArray(unit?.vocabIds) ? unit.vocabIds : [];\n\n  // 화면 상태\n  const [message, setMessage] = useState(null);\n  const [query, setQuery] = useState(\"\");\n  const [words, setWords] = useState([]); // /words에서 로드된 단어 목록\n\n  // JSON 인라인 편집\n  const [jsonOpen, setJsonOpen] = useState(false);\n  const [jsonText, setJsonText] = useState(\"\");\n  const [jsonMeta, setJsonMeta] = useState({ index: -1, originalId: \"\" });\n\n  // ===== 로딩 =====\n  const loadWords = useCallback(async () => {\n    try {\n      const fetched = vocabIds.length ? await fetchWordsByIds(vocabIds) : [];\n      setWords(fetched);\n    } catch (e) {\n      console.error(e);\n      setWords([]);\n    }\n  }, [vocabIds]);\n\n  useEffect(() => {\n    if (!open) return;\n    setMessage(null);\n    setQuery(\"\");\n    setJsonOpen(false);\n    loadWords();\n  }, [open, loadWords]);\n\n  // 검색 필터\n  const filtered = useMemo(() => {\n    const q = (query || \"\").trim().toLowerCase();\n    if (!q) return words;\n    const h = (x) => (x || \"\").toString().toLowerCase();\n    return words.filter((v) => {\n      const zh = v.zh ?? v.hanzi ?? v.id ?? v.cn;\n      const tags = Array.isArray(v.tags) ? v.tags.join(\" \") : \"\";\n      let pronStr = \"\";\n      if (typeof v.pronunciation === \"string\") pronStr = v.pronunciation;\n      else if (Array.isArray(v.pronunciation) && v.pronunciation.length) {\n        pronStr = v.pronunciation[0]?.ko || v.pronunciation[0]?.pinyin || \"\";\n      }\n      return [\n        zh, v.pinyin, v.ko ?? v.meaning, v.pos, tags,\n        v.sentence, v.sentencePinyin, v.sentenceKo, pronStr,\n      ].filter(Boolean).some((x) => h(x).includes(q));\n    });\n  }, [words, query]);\n\n  // 항목 클릭 → JSON 모달\n  const openJsonEditor = (idx, v) => {\n    const wordId = String(v.id || v.zh || v.hanzi || \"\");\n    setJsonMeta({ index: idx, originalId: wordId });\n    setJsonText(JSON.stringify(v, null, 2));\n    setJsonOpen(true);\n  };\n\n  // 새 단어 추가\n  const openNewItemEditor = () => {\n    setJsonMeta({ index: -1, originalId: \"\" });\n    setJsonText(JSON.stringify(NEW_ITEM_TEMPLATE, null, 2));\n    setJsonOpen(true);\n  };\n\n  // JSON 저장(신규/수정 → /words upsert + unit.vocabIds 연결)\n  const onSaveJson = async () => {\n    try {\n      const parsedRaw = JSON.parse(jsonText);\n      if (!parsedRaw || typeof parsedRaw !== \"object\") {\n        throw new Error(\"올바른 JSON 객체가 아닙니다.\");\n      }\n      const parsed = fixWordSchema(parsedRaw);\n      const newId = String(parsed.zh || parsed.hanzi || parsed.id || \"\").trim();\n      if (!newId) throw new Error(\"wordId(zh/hanzi/id)가 필요합니다.\");\n\n      // 1) /words upsert\n      await upsertWord(newId, parsed);\n\n      // 2) unit 연결/교체\n      const wasId = jsonMeta.originalId;\n      if (!wasId) {\n        // 신규 추가\n        await addWordIdsToUnit(editUnitId, [newId]);\n      } else if (wasId !== newId) {\n        // 리네임: 기존 제거 + 신규 추가\n        await removeWordIdFromUnit(editUnitId, wasId);\n        await addWordIdsToUnit(editUnitId, [newId]);\n      } else {\n        // 동일 ID면 아무 것도 안 해도 됨(업데이트만 반영)\n      }\n\n      setMessage({ type: \"success\", text: \"저장 완료\" });\n      setJsonOpen(false);\n\n      // 화면 갱신\n      await loadWords();\n      if (typeof reloadUnit === \"function\") await reloadUnit();\n    } catch (e) {\n      setMessage({ type: \"error\", text: `JSON 저장 실패: ${e.message}` });\n    }\n  };\n\n  // 삭제: unit 연결만 제거(문서 보존)\n  const onDelete = async (v) => {\n    const wordId = String(v.id || v.zh || v.hanzi || \"\");\n    if (!wordId) return;\n    if (!window.confirm(`${wordId} 단어를 이 유닛에서 제거할까요? (/words 문서는 보존됩니다)`)) return;\n    try {\n      await removeWordIdFromUnit(editUnitId, wordId);\n      setMessage({ type: \"success\", text: \"유닛에서 제거 완료\" });\n      await loadWords();\n      if (typeof reloadUnit === \"function\") await reloadUnit();\n    } catch (e) {\n      setMessage({ type: \"error\", text: e?.message || \"제거 실패\" });\n    }\n  };\n\n  // JSON 복사\n  const onCopyJson = async (v) => {\n    try {\n      await navigator.clipboard.writeText(JSON.stringify(v, null, 2));\n      setMessage({ type: \"success\", text: \"JSON이 클립보드에 복사되었습니다.\" });\n    } catch {\n      setMessage({ type: \"error\", text: \"복사 실패: 브라우저 권한을 확인하세요.\" });\n    }\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"xl\" fullWidth>\n      <DialogTitle>단어 관리 (유닛) — /words 저장 + unit.vocabIds 연결</DialogTitle>\n\n      <DialogContent dividers sx={{ p: 0 }}>\n        <Container maxWidth=\"lg\" sx={{ py: 2 }}>\n          {/* 상단 바 */}\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ mb: 2 }}>\n            <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n              <Tooltip title=\"새 단어 추가(템플릿으로 시작)\">\n                <span>\n                  <Button variant=\"contained\" startIcon={<AddIcon />} onClick={openNewItemEditor} sx={{ textTransform: \"none\" }}>\n                    새 단어\n                  </Button>\n                </span>\n              </Tooltip>\n              <Tooltip title=\"목록 새로고침\">\n                <span>\n                  <IconButton onClick={loadWords}><RefreshIcon /></IconButton>\n                </span>\n              </Tooltip>\n            </Stack>\n            <TextField\n              placeholder=\"검색: 한자/병음/뜻/예문/품사/태그\"\n              size=\"small\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n            />\n          </Stack>\n\n          {message && (\n            <Alert severity={message.type} sx={{ mb: 2 }}>\n              {message.text}\n            </Alert>\n          )}\n\n          {/* 단어 목록 */}\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <Paper variant=\"outlined\" sx={{ p: 2 }}>\n                <Typography variant=\"subtitle1\" sx={{ fontWeight: 700, mb: 1 }}>\n                  단어 목록 ({filtered.length} / {words.length})\n                </Typography>\n\n                <Stack spacing={1}>\n                  {filtered.map((v) => {\n                    const name = v.zh || v.hanzi || v.id || \"item\";\n                    return (\n                      <Stack\n                        key={name}\n                        direction=\"row\"\n                        alignItems=\"center\"\n                        justifyContent=\"space-between\"\n                        sx={{\n                          p: 0.75,\n                          borderRadius: 1,\n                          \"&:hover\": { background: \"#fafafa\", cursor: \"pointer\" },\n                        }}\n                        onClick={() => openJsonEditor(words.indexOf(v), v)}\n                      >\n                        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n                          <Typography sx={{ fontWeight: 700, minWidth: 80 }}>\n                            {name}\n                          </Typography>\n                          <Typography variant=\"body2\" color=\"text.secondary\">\n                            {(v.pinyin || \"\").trim()} — {(v.ko ?? v.meaning ?? \"\").trim()}\n                          </Typography>\n                          {v.pos && <Chip size=\"small\" label={v.pos} sx={{ ml: 1 }} />}\n                          {(v.tags || []).map((t) => (\n                            <Chip key={t} size=\"small\" variant=\"outlined\" label={t} sx={{ ml: 0.5 }} />\n                          ))}\n                        </Stack>\n\n                        <Stack direction=\"row\" spacing={0.5} alignItems=\"center\" onClick={(e) => e.stopPropagation()}>\n                          <Tooltip title=\"JSON 복사\">\n                            <IconButton size=\"small\" onClick={() => onCopyJson(v)}>\n                              <ContentCopyIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Tooltip>\n                          <Tooltip title=\"JSON 편집\">\n                            <IconButton size=\"small\" onClick={() => openJsonEditor(words.indexOf(v), v)}>\n                              <EditIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Tooltip>\n                          <Tooltip title=\"유닛에서 제거(연결만 삭제)\">\n                            <IconButton size=\"small\" onClick={() => onDelete(v)}>\n                              <DeleteIcon fontSize=\"small\" />\n                            </IconButton>\n                          </Tooltip>\n                        </Stack>\n                      </Stack>\n                    );\n                  })}\n\n                  {filtered.length === 0 && (\n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      결과가 없습니다.\n                    </Typography>\n                  )}\n                </Stack>\n              </Paper>\n            </Grid>\n          </Grid>\n        </Container>\n      </DialogContent>\n\n      <DialogActions>\n        <Button onClick={onClose}>닫기</Button>\n      </DialogActions>\n\n      {/* JSON 편집 모달(단일 항목) */}\n      <Dialog open={jsonOpen} onClose={() => setJsonOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>\n          <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n            <Typography variant=\"h6\" sx={{ fontWeight: 700 }}>\n              JSON 편집 — {jsonMeta.index >= 0 ? jsonMeta.originalId : \"새 단어\"}\n            </Typography>\n          </Stack>\n        </DialogTitle>\n        <DialogContent dividers>\n          <TextField\n            value={jsonText}\n            onChange={(e) => setJsonText(e.target.value)}\n            multiline\n            minRows={18}\n            fullWidth\n            InputProps={{\n              sx: {\n                fontFamily: \"ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace\",\n                fontSize: 13,\n              },\n            }}\n          />\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n            * <b>zh/hanzi/id</b> 중 하나는 반드시 있어야 합니다. 저장 시 /words에 반영되고 현재 유닛에 연결됩니다.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setJsonOpen(false)} sx={{ textTransform: \"none\" }}>\n            닫기\n          </Button>\n          <Button variant=\"contained\" onClick={onSaveJson} sx={{ textTransform: \"none\" }}>\n            저장\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* 우측 하단 알림 */}\n      {message && (\n        <Box sx={{ position: \"fixed\", inset: \"auto 24px 24px auto\", zIndex: 1300 }}>\n          <Alert severity={message.type} onClose={() => setMessage(null)} variant=\"filled\" sx={{ boxShadow: 2 }}>\n            {message.text}\n          </Alert>\n        </Box>\n      )}\n    </Dialog>\n  );\n}\n"],"names":["createSvgIcon","_jsx","d","NEW_ITEM_TEMPLATE","hanzi","pinyin","ko","pos","tags","sentence","sentencePinyin","sentenceKo","sentenceKoPronunciation","grammar","extensions","zh","koPron","keyPoints","pronunciation","fixWordSchema","raw","arguments","length","undefined","w","_objectSpread","id","sentencePron","Array","isArray","map","e","ex","pron","VocabularyModal","_ref","open","onClose","unitId","editUnitId","unit","reloadUnit","useUnitEdit","vocabIds","message","setMessage","useState","query","setQuery","words","setWords","jsonOpen","setJsonOpen","jsonText","setJsonText","jsonMeta","setJsonMeta","index","originalId","loadWords","useCallback","async","fetched","fetchWordsByIds","console","error","useEffect","filtered","useMemo","q","trim","toLowerCase","filter","v","_ref2","_ref3","_v$zh","_v$ko","cn","join","pronStr","_v$pronunciation$","_v$pronunciation$2","meaning","Boolean","some","x","toString","h","includes","openJsonEditor","idx","wordId","String","JSON","stringify","_jsxs","Dialog","maxWidth","fullWidth","children","DialogTitle","DialogContent","dividers","sx","p","Container","py","Stack","direction","alignItems","justifyContent","mb","spacing","Tooltip","title","Button","variant","startIcon","AddIcon","onClick","openNewItemEditor","textTransform","IconButton","RefreshIcon","TextField","placeholder","size","value","onChange","target","Alert","severity","type","text","Grid","container","item","xs","Paper","Typography","fontWeight","_ref4","_v$ko2","name","borderRadius","background","cursor","indexOf","minWidth","color","Chip","label","ml","t","stopPropagation","navigator","clipboard","writeText","_unused2","onCopyJson","ContentCopyIcon","fontSize","EditIcon","window","confirm","concat","removeWordIdFromUnit","onDelete","DeleteIcon","DialogActions","multiline","minRows","InputProps","fontFamily","mt","parsedRaw","parse","Error","parsed","newId","upsertWord","wasId","addWordIdsToUnit","Box","position","inset","zIndex","boxShadow"],"sourceRoot":""}